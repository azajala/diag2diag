--- original/models_mae.py	2022-05-18 15:44:55.840991834 +0900
+++ msm_mae/models_mae.py	2022-05-17 18:06:34.679926012 +0900
@@ -13,31 +13,102 @@
 
 import torch
 import torch.nn as nn
+import numpy as np
+from timm.models.vision_transformer import PatchEmbed, DropPath, Mlp
+from .pos_embed import get_2d_sincos_pos_embed, get_sinusoid_encoding_table
 
-from timm.models.vision_transformer import PatchEmbed, Block
 
-from util.pos_embed import get_2d_sincos_pos_embed
+class AttentionKBiasZero(nn.Module):
+    def __init__(self, dim, num_heads=8, qkv_bias=True, attn_drop=0., proj_drop=0.):
+        super().__init__()
+        assert dim % num_heads == 0, 'dim should be divisible by num_heads'
+        self.num_heads = num_heads
+        head_dim = dim // num_heads
+        self.scale = head_dim ** -0.5
+
+        self.qkv = nn.Linear(dim, dim * 3, bias=False)
+        if qkv_bias:
+            self.q_bias = nn.Parameter(torch.zeros(dim))
+            self.v_bias = nn.Parameter(torch.zeros(dim))
+        else:
+            self.q_bias = None
+            self.v_bias = None
+
+        self.attn_drop = nn.Dropout(attn_drop)
+        self.proj = nn.Linear(dim, dim)
+        self.proj_drop = nn.Dropout(proj_drop)
+
+    def forward(self, x):
+        B, N, C = x.shape
+
+        qkv_bias = None
+        if self.q_bias is not None:
+            qkv_bias = torch.cat((self.q_bias, torch.zeros_like(self.v_bias, requires_grad=False), self.v_bias))
+        qkv = nn.functional.linear(input=x, weight=self.qkv.weight, bias=qkv_bias)
+
+        qkv = qkv.reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
+        q, k, v = qkv.unbind(0)   # make torchscript happy (cannot use tensor as tuple)
+
+        attn = (q @ k.transpose(-2, -1)) * self.scale
+        attn = attn.softmax(dim=-1)
+        attn = self.attn_drop(attn)
+
+        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
+        x = self.proj(x)
+        x = self.proj_drop(x)
+        return x
+
+
+class BlockKBiasZero(nn.Module):
+
+    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=True, drop=0., attn_drop=0.,
+                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
+        super().__init__()
+        self.norm1 = norm_layer(dim)
+        self.attn = AttentionKBiasZero(dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=drop)
+        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
+        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
+        self.norm2 = norm_layer(dim)
+        mlp_hidden_dim = int(dim * mlp_ratio)
+        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)
+
+    def forward(self, x, return_attention=False):
+        if return_attention:
+            x_att, attn = self.attn(self.norm1(x), return_attention=True)
+            x = x + self.drop_path(x_att)
+            x = x + self.drop_path(self.mlp(self.norm2(x)))
+            return x, attn
+        x = x + self.drop_path(self.attn(self.norm1(x)))
+        x = x + self.drop_path(self.mlp(self.norm2(x)))
+        return x
 
 
 class MaskedAutoencoderViT(nn.Module):
     """ Masked Autoencoder with VisionTransformer backbone
     """
-    def __init__(self, img_size=224, patch_size=16, in_chans=3,
-                 embed_dim=1024, depth=24, num_heads=16,
-                 decoder_embed_dim=512, decoder_depth=8, decoder_num_heads=16,
-                 mlp_ratio=4., norm_layer=nn.LayerNorm, norm_pix_loss=False):
+    def __init__(self, img_size=(80, 208), patch_size=(16, 16), in_chans=1,
+                 embed_dim=768, depth=12, num_heads=12,
+                 decoder_embed_dim=384, decoder_depth=8, decoder_num_heads=12,
+                 mlp_ratio=4., norm_layer=nn.LayerNorm, norm_pix_loss=False,
+                 use_cls_token=False, block_cls=BlockKBiasZero, use_2d_dec_pos_embd=False):
         super().__init__()
+        self.in_chans = in_chans
+        self.use_cls_token = use_cls_token
 
         # --------------------------------------------------------------------------
         # MAE encoder specifics
         self.patch_embed = PatchEmbed(img_size, patch_size, in_chans, embed_dim)
         num_patches = self.patch_embed.num_patches
 
-        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
-        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim), requires_grad=False)  # fixed sin-cos embedding
+        total_patches = num_patches + (1 if use_cls_token else 0)
+        if use_cls_token:
+            self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
+        else:
+            print('NO [CLS] TOKEN')
+        self.pos_embed = nn.Parameter(torch.zeros(1, total_patches, embed_dim), requires_grad=False)  # fixed sin-cos embedding
 
         self.blocks = nn.ModuleList([
-            Block(embed_dim, num_heads, mlp_ratio, qkv_bias=True, qk_scale=None, norm_layer=norm_layer)
+            block_cls(embed_dim, num_heads, mlp_ratio, qkv_bias=True, norm_layer=norm_layer)
             for i in range(depth)])
         self.norm = norm_layer(embed_dim)
         # --------------------------------------------------------------------------
@@ -48,35 +119,55 @@
 
         self.mask_token = nn.Parameter(torch.zeros(1, 1, decoder_embed_dim))
 
-        self.decoder_pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, decoder_embed_dim), requires_grad=False)  # fixed sin-cos embedding
+        self.decoder_pos_embed = nn.Parameter(torch.zeros(1, total_patches, decoder_embed_dim), requires_grad=False)  # fixed sin-cos embedding
 
         self.decoder_blocks = nn.ModuleList([
-            Block(decoder_embed_dim, decoder_num_heads, mlp_ratio, qkv_bias=True, qk_scale=None, norm_layer=norm_layer)
+            block_cls(decoder_embed_dim, decoder_num_heads, mlp_ratio, qkv_bias=True, norm_layer=norm_layer)
             for i in range(decoder_depth)])
 
         self.decoder_norm = norm_layer(decoder_embed_dim)
-        self.decoder_pred = nn.Linear(decoder_embed_dim, patch_size**2 * in_chans, bias=True) # decoder to patch
+        self.decoder_pred = nn.Linear(decoder_embed_dim, self.img_patch_dim(), bias=True) # decoder to patch
         # --------------------------------------------------------------------------
 
         self.norm_pix_loss = norm_pix_loss
 
-        self.initialize_weights()
+        self.initialize_weights(use_2d_dec_pos_embd)
+
+        print(f'{self.__class__.__name__}(patch size={self.patch_size()}, grid_size={self.grid_size()},\n'
+              f'  embed_dim={embed_dim}, depth={depth}, num_heads={num_heads}, decoder_embed_dim={decoder_embed_dim},\n'
+              f'  decoder_depth={decoder_depth}, decoder_num_heads={decoder_num_heads}, mlp_ratio={mlp_ratio},\n'
+              f'  norm_pix_loss={norm_pix_loss}, use_cls_token={use_cls_token}, use_2d_dec_pos_embd={use_2d_dec_pos_embd})')
 
-    def initialize_weights(self):
+    def patch_size(self):
+        return self.patch_embed.proj.kernel_size
+
+    def grid_size(self):
+        return self.patch_embed.grid_size
+
+    def img_patch_dim(self):
+        patch_size = self.patch_size()
+        return patch_size[0] * patch_size[1] * self.in_chans
+
+    def initialize_weights(self, use_2d_dec_pos_embd=False):
         # initialization
         # initialize (and freeze) pos_embed by sin-cos embedding
-        pos_embed = get_2d_sincos_pos_embed(self.pos_embed.shape[-1], int(self.patch_embed.num_patches**.5), cls_token=True)
+        pos_embed = get_2d_sincos_pos_embed(self.pos_embed.shape[-1], self.grid_size(), cls_token=self.use_cls_token)
         self.pos_embed.data.copy_(torch.from_numpy(pos_embed).float().unsqueeze(0))
 
-        decoder_pos_embed = get_2d_sincos_pos_embed(self.decoder_pos_embed.shape[-1], int(self.patch_embed.num_patches**.5), cls_token=True)
+        if use_2d_dec_pos_embd:
+            decoder_pos_embed = get_2d_sincos_pos_embed(self.decoder_pos_embed.shape[-1], self.grid_size(), cls_token=self.use_cls_token)
+        else:
+            grid_patches = self.grid_size()[0] * self.grid_size()[1]
+            decoder_pos_embed = get_sinusoid_encoding_table(grid_patches, self.decoder_pos_embed.shape[-1], cls_token=self.use_cls_token)
         self.decoder_pos_embed.data.copy_(torch.from_numpy(decoder_pos_embed).float().unsqueeze(0))
 
         # initialize patch_embed like nn.Linear (instead of nn.Conv2d)
-        w = self.patch_embed.proj.weight.data
+        w = self.patch_embed.proj.weight.data # shape=torch.Size([768, 1, 16, 16])
         torch.nn.init.xavier_uniform_(w.view([w.shape[0], -1]))
 
         # timm's trunc_normal_(std=.02) is effectively normal_(std=0.02) as cutoff is too big (2.)
-        torch.nn.init.normal_(self.cls_token, std=.02)
+        if self.use_cls_token:
+            torch.nn.init.normal_(self.cls_token, std=.02)
         torch.nn.init.normal_(self.mask_token, std=.02)
 
         # initialize nn.Linear and nn.LayerNorm
@@ -94,30 +185,29 @@
 
     def patchify(self, imgs):
         """
-        imgs: (N, 3, H, W)
-        x: (N, L, patch_size**2 *3)
+        imgs: (N, C, F, T)
+        x: (N, L, patch_size[0]*patch_size[0]*in_chans)
         """
-        p = self.patch_embed.patch_size[0]
-        assert imgs.shape[2] == imgs.shape[3] and imgs.shape[2] % p == 0
 
-        h = w = imgs.shape[2] // p
-        x = imgs.reshape(shape=(imgs.shape[0], 3, h, p, w, p))
+        ph, pw = self.patch_size()
+        h, w = self.grid_size()
+        x = imgs.reshape(shape=(imgs.shape[0], self.in_chans, h, ph, w, pw))
         x = torch.einsum('nchpwq->nhwpqc', x)
-        x = x.reshape(shape=(imgs.shape[0], h * w, p**2 * 3))
+        x = x.reshape(shape=(imgs.shape[0], h * w, self.img_patch_dim()))
         return x
 
     def unpatchify(self, x):
         """
-        x: (N, L, patch_size**2 *3)
-        imgs: (N, 3, H, W)
+        x: (N, L, patch_size[0]*patch_size[0]*in_chans)
+        imgs: (N, C, H, W)
         """
-        p = self.patch_embed.patch_size[0]
-        h = w = int(x.shape[1]**.5)
+        ph, pw = self.patch_size()
+        h, w = self.grid_size()
         assert h * w == x.shape[1]
         
-        x = x.reshape(shape=(x.shape[0], h, w, p, p, 3))
+        x = x.reshape(shape=(x.shape[0], h, w, ph, pw, self.in_chans))
         x = torch.einsum('nhwpqc->nchpwq', x)
-        imgs = x.reshape(shape=(x.shape[0], 3, h * p, h * p))
+        imgs = x.reshape(shape=(x.shape[0], self.in_chans, h * ph, w * pw))
         return imgs
 
     def random_masking(self, x, mask_ratio):
@@ -127,13 +217,26 @@
         x: [N, L, D], sequence
         """
         N, L, D = x.shape  # batch, length, dim
-        len_keep = int(L * (1 - mask_ratio))
-        
-        noise = torch.rand(N, L, device=x.device)  # noise in [0, 1]
-        
-        # sort noise for each sample
-        ids_shuffle = torch.argsort(noise, dim=1)  # ascend: small is keep, large is remove
-        ids_restore = torch.argsort(ids_shuffle, dim=1)
+
+        if isinstance(mask_ratio, (torch.Tensor, np.ndarray, list, tuple)):
+            # Prefixed mask
+            mask = mask_ratio.clone().detach()
+            #ids_shuffle = torch.where(mask.reshape(N, -1) == 0)[1].reshape(N, -1)
+            ids_shuffle = torch.argsort(mask.reshape(N, -1), dim=1)
+            ids_restore = torch.argsort(ids_shuffle, dim=1)
+            len_keep = (mask[0] == 0).sum()
+        elif mask_ratio == 0:
+            # No mask
+            mask = torch.zeros([N, L], device=x.device)
+            ids_restore = torch.tensor(list(range(L))).to(torch.int)
+            return x, mask, ids_restore
+        else:
+            # Random mask
+            len_keep = int(L * (1 - mask_ratio))
+            noise = torch.rand(N, L, device=x.device)  # noise in [0, 1]
+            # sort noise for each sample
+            ids_shuffle = torch.argsort(noise, dim=1)  # ascend: small is keep, large is remove
+            ids_restore = torch.argsort(ids_shuffle, dim=1)
 
         # keep the first subset
         ids_keep = ids_shuffle[:, :len_keep]
@@ -147,26 +250,37 @@
 
         return x_masked, mask, ids_restore
 
-    def forward_encoder(self, x, mask_ratio):
+    def forward_encoder(self, x, mask_ratio, return_layers=False):
         # embed patches
         x = self.patch_embed(x)
 
         # add pos embed w/o cls token
-        x = x + self.pos_embed[:, 1:, :]
+        if self.use_cls_token:
+            x = x + self.pos_embed[:, 1:, :]
+        else:
+            x = x + self.pos_embed
 
         # masking: length -> length * mask_ratio
         x, mask, ids_restore = self.random_masking(x, mask_ratio)
 
         # append cls token
-        cls_token = self.cls_token + self.pos_embed[:, :1, :]
-        cls_tokens = cls_token.expand(x.shape[0], -1, -1)
-        x = torch.cat((cls_tokens, x), dim=1)
+        if self.use_cls_token:
+            cls_token = self.cls_token + self.pos_embed[:, :1, :]
+            cls_tokens = cls_token.expand(x.shape[0], -1, -1)
+            x = torch.cat((cls_tokens, x), dim=1)
 
         # apply Transformer blocks
+        layers = []
         for blk in self.blocks:
             x = blk(x)
+            if return_layers: layers.append(x)
         x = self.norm(x)
+        if return_layers:
+            layers.pop() # replace the last feature with the normalized one.
+            layers.append(x)
 
+        if return_layers:
+            return torch.stack(layers), mask, ids_restore
         return x, mask, ids_restore
 
     def forward_decoder(self, x, ids_restore):
@@ -177,7 +291,10 @@
         mask_tokens = self.mask_token.repeat(x.shape[0], ids_restore.shape[1] + 1 - x.shape[1], 1)
         x_ = torch.cat([x[:, 1:, :], mask_tokens], dim=1)  # no cls token
         x_ = torch.gather(x_, dim=1, index=ids_restore.unsqueeze(-1).repeat(1, 1, x.shape[2]))  # unshuffle
-        x = torch.cat([x[:, :1, :], x_], dim=1)  # append cls token
+        if self.use_cls_token:
+            x = torch.cat([x[:, :1, :], x_], dim=1)  # append cls token
+        else:
+            x = x_
 
         # add pos embed
         x = x + self.decoder_pos_embed
@@ -191,14 +308,15 @@
         x = self.decoder_pred(x)
 
         # remove cls token
-        x = x[:, 1:, :]
+        if self.use_cls_token:
+            x = x[:, 1:, :]
 
         return x
 
     def forward_loss(self, imgs, pred, mask):
         """
-        imgs: [N, 3, H, W]
-        pred: [N, L, p*p*3]
+        imgs: [N, C, H, W]
+        pred: [N, L, ph*pw*C]
         mask: [N, L], 0 is keep, 1 is remove, 
         """
         target = self.patchify(imgs)
@@ -219,32 +337,92 @@
         loss = self.forward_loss(imgs, pred, mask)
         return loss, pred, mask
 
+    def forward_viz(self, imgs, mask_ratio=0.75):
+        loss, pred, mask = self.forward(imgs, mask_ratio)
+        # recons_as_is = self.unpatchify(pred)
+        # overwrite visible patches with original image.
+        pred_org_on_mask = pred.clone()
+        visible = (mask == 0.)
+        pred_org_on_mask[visible] = self.patchify(imgs)[visible]
+        recons = self.unpatchify(pred_org_on_mask)
+        errormap = ((recons - imgs) ** 2).sqrt()
+        return loss, recons, errormap, mask.reshape(mask.shape[0], *self.grid_size())
+
 
-def mae_vit_base_patch16_dec512d8b(**kwargs):
+def mae_vit_base_patchX_dec384d4b(patch_size, **kwargs):
     model = MaskedAutoencoderViT(
-        patch_size=16, embed_dim=768, depth=12, num_heads=12,
-        decoder_embed_dim=512, decoder_depth=8, decoder_num_heads=16,
+        patch_size=patch_size, embed_dim=768, depth=12, num_heads=12,
+        decoder_embed_dim=384, decoder_depth=4, decoder_num_heads=6,
         mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)
     return model
 
+def mae_vit_base_patch16x16_dec384d4b(**kwargs):
+    return mae_vit_base_patchX_dec384d4b([16, 16], **kwargs)
+
+def mae_vit_base_patch16x8_dec384d4b(**kwargs):
+    return mae_vit_base_patchX_dec384d4b([16, 8], **kwargs)
+
+def mae_vit_base_patch16x4_dec384d4b(**kwargs):
+    return mae_vit_base_patchX_dec384d4b([16, 4], **kwargs)
+
+def mae_vit_base_patch8x16_dec384d4b(**kwargs):
+    return mae_vit_base_patchX_dec384d4b([8, 16], **kwargs)
+
+def mae_vit_base_patch80x4_dec384d4b(**kwargs):
+    return mae_vit_base_patchX_dec384d4b([80, 4], **kwargs)
+
+def mae_vit_base_patch8x8_dec384d4b(**kwargs):
+    return mae_vit_base_patchX_dec384d4b([8, 8], **kwargs)
+
+def mae_vit_base_patch80x2_dec384d4b(**kwargs):
+    return mae_vit_base_patchX_dec384d4b([80, 2], **kwargs)
 
-def mae_vit_large_patch16_dec512d8b(**kwargs):
+def mae_vit_base_patch80x1_dec384d4b(**kwargs):
+    return mae_vit_base_patchX_dec384d4b([80, 1], **kwargs)
+
+
+def mae_vit_large_patch16x16_dec512d8b(**kwargs):
     model = MaskedAutoencoderViT(
-        patch_size=16, embed_dim=1024, depth=24, num_heads=16,
+        patch_size=[16, 16], embed_dim=1024, depth=24, num_heads=16,
         decoder_embed_dim=512, decoder_depth=8, decoder_num_heads=16,
         mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)
     return model
 
 
-def mae_vit_huge_patch14_dec512d8b(**kwargs):
+def mae_vit_huge_patch14x14_dec512d8b(**kwargs):
     model = MaskedAutoencoderViT(
-        patch_size=14, embed_dim=1280, depth=32, num_heads=16,
+        patch_size=[14, 14], embed_dim=1280, depth=32, num_heads=16,
         decoder_embed_dim=512, decoder_depth=8, decoder_num_heads=16,
         mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)
     return model
 
 
+def mae_vit_base_patchX_dec384dXb(patch_size, dec_depth=4, **kwargs):
+    model = MaskedAutoencoderViT(
+        patch_size=patch_size, embed_dim=768, depth=12, num_heads=12,
+        decoder_embed_dim=384, decoder_depth=dec_depth, decoder_num_heads=6,
+        mlp_ratio=4, norm_layer=partial(nn.LayerNorm, eps=1e-6), **kwargs)
+    return model
+
+
 # set recommended archs
-mae_vit_base_patch16 = mae_vit_base_patch16_dec512d8b  # decoder: 512 dim, 8 blocks
-mae_vit_large_patch16 = mae_vit_large_patch16_dec512d8b  # decoder: 512 dim, 8 blocks
-mae_vit_huge_patch14 = mae_vit_huge_patch14_dec512d8b  # decoder: 512 dim, 8 blocks
+mae_vit_base_patch16x16 = mae_vit_base_patch16x16_dec384d4b  # decoder: 384 dim, 4 blocks
+mae_vit_base_patch16x8 = mae_vit_base_patch16x8_dec384d4b
+mae_vit_base_patch16x4 = mae_vit_base_patch16x4_dec384d4b
+mae_vit_base_patch8x16 = mae_vit_base_patch8x16_dec384d4b
+mae_vit_base_patch80x4 = mae_vit_base_patch80x4_dec384d4b
+
+# Not used
+mae_vit_base_patch8x8 = mae_vit_base_patch8x8_dec384d4b
+mae_vit_large_patch16x16 = mae_vit_large_patch16x16_dec512d8b  # decoder: 512 dim, 8 blocks
+mae_vit_huge_patch14x14 = mae_vit_huge_patch14x14_dec512d8b  # decoder: 512 dim, 8 blocks
+mae_vit_base_patch80x2 = mae_vit_base_patch80x2_dec384d4b
+mae_vit_base_patch80x1 = mae_vit_base_patch80x1_dec384d4b
+
+
+if __name__ == '__main__':
+    m = MaskedAutoencoderViT()
+    #print(m) # test
+    loss, pred, mask = m(torch.rand(3, 1, 80, 208))
+    print('loss', loss, 'pred', pred.shape, 'mask', mask.shape)
+    print(mask.reshape(3, 5, 13).to(torch.int))
--- original/engine_pretrain.py	2022-05-18 15:44:42.613039580 +0900
+++ msm_mae/engine_pretrain.py	2022-05-17 18:06:34.679926012 +0900
@@ -33,10 +33,7 @@
 
     optimizer.zero_grad()
 
-    if log_writer is not None:
-        print('log_dir: {}'.format(log_writer.log_dir))
-
-    for data_iter_step, (samples, _) in enumerate(metric_logger.log_every(data_loader, print_freq, header)):
+    for data_iter_step, samples in enumerate(metric_logger.log_every(data_loader, print_freq, header)):
 
         # we use a per iteration (instead of per epoch) lr scheduler
         if data_iter_step % accum_iter == 0:
@@ -47,6 +44,7 @@
         with torch.cuda.amp.autocast():
             loss, _, _ = model(samples, mask_ratio=args.mask_ratio)
 
+        loss = loss.mean()
         loss_value = loss.item()
 
         if not math.isfinite(loss_value):
diff -u util/pos_embed.py ../util/pos_embed.py
--- util/pos_embed.py	2022-03-31 08:30:46.053352675 +0900
+++ ../util/pos_embed.py	2022-03-14 20:49:01.497119223 +0900
@@ -17,18 +17,19 @@
 # Transformer: https://github.com/tensorflow/models/blob/master/official/nlp/transformer/model_utils.py
 # MoCo v3: https://github.com/facebookresearch/moco-v3
 # --------------------------------------------------------
-def get_2d_sincos_pos_embed(embed_dim, grid_size, cls_token=False):
+def get_2d_sincos_pos_embed(embed_dim, grid_sizes, cls_token=False):
     """
     grid_size: int of the grid height and width
     return:
     pos_embed: [grid_size*grid_size, embed_dim] or [1+grid_size*grid_size, embed_dim] (w/ or w/o cls_token)
     """
-    grid_h = np.arange(grid_size, dtype=np.float32)
-    grid_w = np.arange(grid_size, dtype=np.float32)
+    gH, gW = grid_sizes
+    grid_h = np.arange(gH, dtype=np.float32)
+    grid_w = np.arange(gW, dtype=np.float32)
     grid = np.meshgrid(grid_w, grid_h)  # here w goes first
     grid = np.stack(grid, axis=0)
 
-    grid = grid.reshape([2, 1, grid_size, grid_size])
+    grid = grid.reshape([2, 1, gH, gW])
     pos_embed = get_2d_sincos_pos_embed_from_grid(embed_dim, grid)
     if cls_token:
         pos_embed = np.concatenate([np.zeros([1, embed_dim]), pos_embed], axis=0)
@@ -94,3 +95,20 @@
             pos_tokens = pos_tokens.permute(0, 2, 3, 1).flatten(1, 2)
             new_pos_embed = torch.cat((extra_tokens, pos_tokens), dim=1)
             checkpoint_model['pos_embed'] = new_pos_embed
+
+
+# sin-cos position encoding
+# https://github.com/jadore801120/attention-is-all-you-need-pytorch/blob/master/transformer/Models.py#L31
+def get_sinusoid_encoding_table(n_position, d_hid, cls_token=False): 
+    ''' Sinusoid position encoding table ''' 
+    # TODO: make it with torch instead of numpy 
+    def get_position_angle_vec(position): 
+        return [position / np.power(10000, 2 * (hid_j // 2) / d_hid) for hid_j in range(d_hid)] 
+
+    sinusoid_table = np.array([get_position_angle_vec(pos_i) for pos_i in range(n_position)]) 
+    sinusoid_table[:, 0::2] = np.sin(sinusoid_table[:, 0::2]) # dim 2i 
+    sinusoid_table[:, 1::2] = np.cos(sinusoid_table[:, 1::2]) # dim 2i+1 
+
+    if cls_token:
+        sinusoid_table = np.concatenate([np.zeros([1, d_hid]), sinusoid_table], axis=0)
+    return sinusoid_table
